// Code generated by gowebx, DO AVOID EDIT.
package api

import (
	"strconv"

	"github.com/gin-gonic/gin"
	"github.com/gowvp/gb28181/internal/core/gb28181"
	"github.com/gowvp/gb28181/internal/core/gb28181/store/gb28181db"
	"github.com/gowvp/gb28181/internal/core/uniqueid"
	"github.com/ixugo/goweb/pkg/web"
	"gorm.io/gorm"
)

type Gb28181API struct {
	gb28181Core gb28181.Core
}

func NewGb28181API(db *gorm.DB, uni uniqueid.Core) Gb28181API {
	core := gb28181.NewCore(gb28181db.NewDB(db).AutoMigrate(true), uni)
	return Gb28181API{gb28181Core: core}
}

func registerGb28181(g gin.IRouter, api Gb28181API, handler ...gin.HandlerFunc) {
	{
		group := g.Group("/devices", handler...)
		group.GET("", web.WarpH(api.findDevice))
		group.GET("/:id", web.WarpH(api.getDevice))
		group.PUT("/:id", web.WarpH(api.editDevice))
		group.POST("", web.WarpH(api.addDevice))
		group.DELETE("/:id", web.WarpH(api.delDevice))
	}

	{
		group := g.Group("/channels", handler...)
		group.GET("", web.WarpH(api.findChannel))
		group.GET("/:id", web.WarpH(api.getChannel))
		group.PUT("/:id", web.WarpH(api.editChannel))
		group.POST("", web.WarpH(api.addChannel))
		group.DELETE("/:id", web.WarpH(api.delChannel))
	}
}

// >>> device >>>>>>>>>>>>>>>>>>>>

func (a Gb28181API) findDevice(c *gin.Context, in *gb28181.FindDeviceInput) (any, error) {
	items, total, err := a.gb28181Core.FindDevice(c.Request.Context(), in)
	return gin.H{"items": items, "total": total}, err
}

func (a Gb28181API) getDevice(c *gin.Context, _ *struct{}) (any, error) {
	deviceID, _ := strconv.Atoi(c.Param("id"))
	return a.gb28181Core.GetDevice(c.Request.Context(), deviceID)
}

func (a Gb28181API) editDevice(c *gin.Context, in *gb28181.EditDeviceInput) (any, error) {
	deviceID := c.Param("id")
	return a.gb28181Core.EditDevice(c.Request.Context(), in, deviceID)
}

func (a Gb28181API) addDevice(c *gin.Context, in *gb28181.AddDeviceInput) (any, error) {
	return a.gb28181Core.AddDevice(c.Request.Context(), in)
}

func (a Gb28181API) delDevice(c *gin.Context, _ *struct{}) (any, error) {
	deviceID := c.Param("id")
	return a.gb28181Core.DelDevice(c.Request.Context(), deviceID)
}

// >>> channel >>>>>>>>>>>>>>>>>>>>

func (a Gb28181API) findChannel(c *gin.Context, in *gb28181.FindChannelInput) (any, error) {
	items, total, err := a.gb28181Core.FindChannel(c.Request.Context(), in)
	return gin.H{"items": items, "total": total}, err
}

func (a Gb28181API) getChannel(c *gin.Context, _ *struct{}) (any, error) {
	channelID, _ := strconv.Atoi(c.Param("id"))
	return a.gb28181Core.GetChannel(c.Request.Context(), channelID)
}

func (a Gb28181API) editChannel(c *gin.Context, in *gb28181.EditChannelInput) (any, error) {
	channelID, _ := strconv.Atoi(c.Param("id"))
	return a.gb28181Core.EditChannel(c.Request.Context(), in, channelID)
}

func (a Gb28181API) addChannel(c *gin.Context, in *gb28181.AddChannelInput) (any, error) {
	return a.gb28181Core.AddChannel(c.Request.Context(), in)
}

func (a Gb28181API) delChannel(c *gin.Context, _ *struct{}) (any, error) {
	channelID, _ := strconv.Atoi(c.Param("id"))
	return a.gb28181Core.DelChannel(c.Request.Context(), channelID)
}
